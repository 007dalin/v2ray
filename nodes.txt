D]WBCWG]VyrpV{]tZjrx{ZwI~rsI~KpD|ZwX|p^V{ssVy\wAhs{y[h{YEzyrpV{sx^R{Z]XTgXhwtG|\cZP^DR\g{YEzyrpV{sxAjrx{Zk~eRHkJg|fx}tcE~v|YX}\x ~dk~[gZhthX~e{[|I{BsXpV{ssXR\g{Z]XT|X~q]VyrpV{^pYTvVX}Y{Gifk]ZUb	X~q]VyrpV{^pGS_`X}Y{~u|X~q]VyrpV{^pKy[^Xf[tbbpIdQV}[pHcF}bIcsI~u^Kc{BsXpV{ssXTvIK{Z]XTvIK{YEzyrpV{sxUis]{Z]XR\Dhc{BsXpV{ssXTXx{Z{Xs_8F_TCBUE^WxrpUy_w[krxyX|}[xH~[H|X}KxCrXpUyqpYhf]YyX^Y[`[|s^WxrpUy_YFR`[[{Ykf^T_CkfXja[kvH|_\UrxAs[pWxrp[Qe`Y~X{YvUY|fwZi[JhK`|f`Jk[ZFiXk\hbug\k\xKvYY|x[|s^WxrpUy_\Urxy\UJxXFyyqpWxr{Eijc_x[^[| I@kYjeFxXFyyqpWxr{ER{ x[^[~v`JxXFyyqpWxr{ESKxxZbbwdW|e|EyvxG|[tF}vtD|etU}f`|Kt[|s^WxrpUy\cCRHxy\cCRHxAs[pWxrp[Tz]Gkbxy_FS\d[|s^WxrpUy\hY~XxKyUA	;G\WCATF]W{rqVx\t[hryx[~[yKXHKuD|eU {XGzxrsW{rzYPfcY}Xyr{CqXqVxrsYSv	KUr{{\]Uv`XPHZUf|BhvK}\IhHyBrXsW{rqXPfcY}Xy KV]|KuFXYu\]}e`YheiEh\gJ|H  ~fwH|fe|ekHeuX}p]W{rqVx\\Vryx_VJ{XGzxrsW{rzFhi`_{[_X}|XSfHGRX
Y~p_VxrsW{_rGR_cY}XyuY~p_VxrsW{_rKx[]YfZ	tcbsHeeV|[sIb F|bHbqIu]JbyBrXsW{rqXUvJJ{[_XUvJJ{XGzxrsW{rzTip\{[_XS\EhbyBrXsW{rqXUX{{[yXr_8G]TBBTG^VxqqUx]wZkqyxZxH|qJtxD|fSH}Z`x[GyxspVxqzZPg`X~[y sxBr[qUxspXPu	HUsxx\T^h]cYSKYUgCkuH}]HkKyArYpVxqq[Pg`X~[zXkdZkfaJ|Y YhebX}d`|f}F~t]Y~q J{[He gd| y[}q^VxqqUx]]Uqyx^UKx[GyxspVxqzEhhc^xX_[}wDTjTZTc	X}s_UxspVx\rDR^`X~[yt|X}s_UxspVx\rHxZ^XeY	wccpI|f}U|ZpH|a E|cI|aqJt^K|ayArYpVxqq[UwIKxX_[UwIKx[GyxspVxqzThs]xX_[S]DkayArYpVxqq[UYxxXy[r^;D]WBCWG]VyrpV{]tZjrx{ZwI~rsI~K|DdY yXFz{ssVyr{YSgcXXx|s{BsXpV{ssXQvKVs{y\^SgYR\gQIZTfChwK|\HhI{BsXpV{ssXQf`X}YxZ~uZF}wc~Hhwk|e`H|gkEi[Vc\~uk]|tQI}uZ}dsX|p^V{ssVy\]Vs{y_UK{YEzyrpV{sxFiic^{Z]X|{Yk]xATr	X~q]VyrpV{^pGS_`X}Y{~u|X~q]VyrpV{^pKy[^Xf[tbbpIdkV}[pHcF}bIcsI~u^Kc{BsXpV{ssXTvIK{Z]XTvIK{YEzyrpV{sxUis]{Z]XR\Dhc{BsXpV{ssXTXx{Z{Xs_8F_TCBUE^WxrpUy_w[krxyXtHr~KH|[tG}fxIxXFyyqpWxr{ZQe`Y~Xx ~qxCrXpUyqpYPvHTqxx_cKTjc_k_gAR_gJRHYTeBkvH|_IkHxAs[pWxrp[Qe`Y~Xx jfV|fgX}a X~up|f`I|v|FetJX X~vg]es_ifdKV[|s^WxrpUy_\Urxy\UJxXFyyqpWxr{Eijc_x[^[| kfwYUa	Y}p^UyqpWx_sDS\`Y~Xx~v|Y}p^UyqpWx_sHyX^YeZwbapH|etU}XpI|bE}aH|bpJ~v^J|bxAs[pWxrp[TuIJx[^[TuIJxXFyyqpWxr{Ujs\x[^[R_EkbxAs[pWxrp[T[xx[x[s\;EC]ZS_
T	W	P
SU WVRW	 QqVDRZJYS^VT_Y]^UWPustpsts	trq	pnE][K^o nw	ppu
rswwsrqtru	sstst	ttprpYFDBBp vvE\W wS_YD_Q\CYVYE	8EB^[P\
	RSRUWTT 	PTSPURrVGR[IXP]VW_X^_V]^urwspwp	tsr	sn[nt
uwpsstu
rpvwsp mu
tsssu n    w wttprpwsuppwpt		 	uwsqpXEEAApw vF]TtS\YE\P_@YUYD;D]WBCWGzyrpXVY{yrxH{YEsXpV{^pKy[^V{EWEfX_Ua	]]A\\]]j[yADXGcv_\}i\[AjA_AyAUjbGF{A^Vx`FSK^G~cDRfdGk^Tf YP^xAjY}dYX|pz{ssXifcZ{Z]Vy\IAVx`Bji QYERrxBva]Vyr{FPxy[^V{Zc}HxBva]Vyr{Ahs{yr{]hZsFjvgY}sj[|~dwIjfxE}ttYiX |ZsF}u|HdkKjv|X~qzyrpXkg^Zy[^V{ZwHyXFqYsVy\]Vs{yr{QI{Bt`^V{sxUis]{Z]Vy\GP]gX|pz{ssXQvKVs{yr{BSh`RvgKVh{DRfFX~qzyrpXQwtQrx{s{GTd][|AFR[tG{YEsXpV{^`BSHx{sxRy|XvaB:EC^XQ\TW 
S PWQWS	P
TS	VrWERZI[Q]WU_Y^\WRVtswrpup tpsqnZnuuwprputsqvuspot	qtrpr o  t wutrrswpt	pqup  t
twrq	pYEF@Apt wD\TtR^YD\S^@XWYE:FC_[P_WPRPRQV PSR	qTEQZHXSP]J[WPustpsts	trq	pnZmw	u tprrwu	ssutp	s ntpwspr
o  t wupt
qptq 	 t
 wvsspZDFACptwE_UvR_YG]S_BXVYF	;F\TBA
UFz{ssXTXx{s{HyXFqYsVy_sK{Z]VyDTGeX]Tb	_\A^_]_hXyCE[EbpVa ^@]QychveKPQycQx|H~]]|DSxdEifHSgV^TuZ{YEsXpV{]tZjrx{sxXQfUKVh{DihX~qzyrpXQwHTrx{s{~u|X~qzyrpXSgcXXpXhZd[~vw\hwE~ep}cI}fgX~dU ~KtE|dkF}upKZ{Hi[R{YEsXpV{]tAjrx{s{I}XxBva]Vyr{DhhcXXpXVX|pz{ssXTy]Fhc{yr{DP]yXFqYsVy\YGQcXXpXk]^_SgH~]|\yXFqYsVy_sYVwUXXpX~VxgZ]yP |HxBva]Vyr{PxXXpXVwJKyVzTa:EC^XQ\P	V SUPT		V	TSU UrWERZI[Q]WU_Y^\WVAtswrpup tpsqntpwsprot	qsu	sptwpsqt	rt
ppw	p u wwsrqZEDABqvwF_TwR\XG\Q_CXUXF	;EC]ZS_
PQSSVU PUR QWRT qSYX_SX@XWYE_\wsvssuqwsrqmZotv	tsrstwspuursotquqsrn v  v wsuppwpt		 	uwsqpXEEAApw vF]TtS\YE\P_@YUYD;FB][Q_RWW
UVQSPQURSRWST	qIXPE\WPustpsts	trq	pnBW_G]o nw	ppu
rswwsrqtru	sstst	ttprpYFDBBp vvE\W wS_YD_Q\CYVYE	8EB^[P\
	 RUSW VRWUWrVGR[IX[[^BX^VVS
tpwsswpurrsoAT_D]n ot	qsu	sptwpsqt	rt
ppw	p u wwsrqZEDABqvwF_TwR\XG\Q_CXUXF	;EC]ZS_
UUQRSPV	W	 UWSWVqVDRZJYXX^AX_UQW
wswprtp	usqpoBT^G\mot	qpt
psw		p
t	ruppts twrq	ptsw	qpuqw	 tvsr	sYDEABswtD\UwQ^ZD]P_C[WZE	;E@_XP^P
	WTWRSVSWWWRWPQSp\X]YW]V_VPtrtrstswsspmwstrqqot	qpt
pswvsspu	sw	pst	p	u	twpsqYEEBCqwtE\T vQ_XD\P\B[VXE8F_TCBUE{xrp[T[xxrxKy[F~rXpUy\sJx[^UyGTDf[]Wb\]_\i]_zFJ}d_YC]D~_FGxK\\~i]X@iB_By@VkaDFxA_UycESH^F}`GRedFh]Te XS_{Bj Y ~eZ[|s{xrp[iec[x[^Uy__PfZQzxEhh[|s{xrp[SuIUrxyqx u|[|s{xrp[Qe`Y~Xp[}fk[~eY^fhDe|i[H|fg[|fVGk[ZF~fhG|upH}X]|hy[F~rXpUy_w@krxyqxH|XxAtc^Wxr{Gjj`Y~Xp[T|Y}pyyqpYUy]Ejaxxr{GR \xXF|s[pWx\YDS`Y~Xp[i Y@S\w]S[ZkXxAtc^Wxr{Eijc_x[^Uy[wh]{EfH{b|H	[|s{xrp[TuIJx[^Uy\cCRHx|s\;EC]ZS_
QQTUPQ	PP
RRqSYX_SXG\Q_C_\wsvssuqwsrqmustspsnw	ppu
rswwsrqtru	sstst	ttprpYFDBBp vvE\W wS_YD_Q\CYVYE	8EB^[P\
 S S	
U SPVU	U	TRrD@^DC^_\wsvssuqwsrqmutstrstnw	ppu
rstru	sstst	ttprpwvsspZDFACptwE_UvR_YG]S_BXVYF	;DC^[S^T	   	QUSWS	UQWpJXRD_UAwsvssuqwsrqmu	ppwtr	t	prtrnw		sqtsruwsqptstsqts w		utrrsXFE@Bs wwE]WwR_ZE_P^CXVZD:EC^XQ\TVQVVR	VR rWERZI[Q]WU_Y^\WE[tswrpup tpsqntpwsprot	qsu	sptwpsqt	rt
ppw	p u wwsrqZEDABqvwF_TwR\XG\Q_CXUXF	;EC]ZS_
 TQR  TPU	RPQPQWqHXSD\QW
wswprtp	usqpofiw	tuqrsww	ssttsrnn  v tuwsqptstsqts w		utrrsXFE@Bs wwE]WwR_ZE_P^CXVZD:;